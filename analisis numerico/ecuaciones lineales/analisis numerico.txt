metodo de biseccion

----------------------------------------------------------------------------------------
import numpy as np
from math import cos
from math import e

def my_bisection(f, a, b, tol, n): 
    
    if np.sign(f(a)) == np.sign(f(b)):
        raise Exception(
         "a y b no complen las condiciones")
       
    m = (a + b)/2
    
    if np.abs(f(m)) < tol:
        return m
    elif np.sign(f(a)) == np.sign(f(m)):
        n +=1
        print(n,   a,    b,    m,   f(m))
        return my_bisection(f, m, b, tol, n)
    elif np.sign(f(b)) == np.sign(f(m)):
        n +=1
        print(n,   a,    b,    m,    f(m))
        return my_bisection(f, a, m, tol, n)

f = lambda x:x**3 +4*x**2-10

print("n     a    b       m     f(m)")


my_bisection(f, 1, 2, 10**(-4), 0)


----------------------------------------------------------------------------------------

metodo de newton
----------------------------------------------------------------------------------------
import numpy as np

f = lambda x: 230*x**4 + 18*x**3 + 9*x**2 - 221*x - 9
f_prime = lambda x: 920*x**3 +54*x**2 +18*x - 221
print("n p")
def my_newton(f, df, x0, tol, n):
    if abs(f(x0)) < tol:
        print(n, x0)
        n+=1
        return x0
    else:
        print(n, x0)
        n+=1
        return my_newton(f, df, x0 - f(x0)/df(x0), tol, n)
    
estimate = my_newton(f, f_prime, 1, 10**(-6), 0)

--------------------------------------------------------------------------------------------------
metodo secante

-----------------------------------------------------------------------------------------------------
import numpy as np
fx = lambda x: x**3 + 2*x**2 +10*x-20
print("n   xn   f(xn)")
print("0   0","   ",fx(0))
def secante(f,x0,x1,tol,n):
    print(n, x1,f(x1))
    if abs(f(x1))>tol:
        n+=1
        k = x1
        x1 = x1 - ((f(x1))*(x1 -x0))/(f(x1)-f(x0))
        return secante(f,k,x1,tol,n)
    
secante(fx,0,1,10**(-3),1)    